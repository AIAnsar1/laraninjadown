<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use SergiX44\Nutgram\Nutgram;
use SergiX44\Nutgram\Telegram\Types\Keyboard\{ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton};
use SergiX44\Nutgram\Telegram\Types\Input\InputFile;
use Illuminate\Support\Facades\Cache;
use App\Models\TelegramUser;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\Log;
use App\Models\Advertisements;
use App\Models\AdvertisementsDeliveries;

class AdminController extends Controller
{
    public function startAd(Nutgram $bot)
    {
        if (!in_array($bot->userId(), config('nutgram.admins_id'))) {
            $bot->sendMessage('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.');
            return;
        }

        Cache::put("ad_fsm_{$bot->userId()}", ['step' => 'lang'], now()->addMinutes(20));

        $keyboard = InlineKeyboardMarkup::make()
            ->addRow(
                InlineKeyboardButton::make('üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'ad_lang:ru'),
                InlineKeyboardButton::make('üá∫üá∏ English', callback_data: 'ad_lang:en')
            );

        $bot->sendMessage("üåç –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏:", reply_markup: $keyboard);
    }

    public function adFsmLang(Nutgram $bot, $lang)
    {
        $fsm = Cache::get("ad_fsm_{$bot->userId()}");
        if (!$fsm) return;

        $fsm['lang'] = $lang;
        $fsm['step'] = 'title'; // ‚¨ÖÔ∏è –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã
        Cache::put("ad_fsm_{$bot->userId()}", $fsm);

        $bot->answerCallbackQuery();
        $bot->sendMessage("üì¢ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã.");
    }

    public function adFsmText(Nutgram $bot)
    {
        $fsm = Cache::get("ad_fsm_{$bot->userId()}");
        if (!$fsm) return;

        switch ($fsm['step']) {
            case 'title':
                $fsm['title'] = $bot->message()->text;
                $fsm['step'] = 'description';
                Cache::put("ad_fsm_{$bot->userId()}", $fsm);
                $bot->sendMessage('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã.');
                break;

            case 'description':
                $fsm['description'] = $bot->message()->text;
                $fsm['step'] = 'media';
                Cache::put("ad_fsm_{$bot->userId()}", $fsm);
                $bot->sendMessage('üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ–∫—É (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip).');
                break;

            case 'url':
                if (!preg_match('~^https?://~', $bot->message()->text)) {
                    $bot->sendMessage('‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).');
                    return;
                }
                $fsm['button_url'] = $bot->message()->text;
                $fsm['step'] = 'button_title';
                Cache::put("ad_fsm_{$bot->userId()}", $fsm);
                $bot->sendMessage('üìé –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–µ—Ä–µ–π—Ç–∏)');
                break;

            case 'button_title':
                $fsm['button_text'] = $bot->message()->text;
                $fsm['step'] = 'preview';
                Cache::put("ad_fsm_{$bot->userId()}", $fsm);

                $keyboard = InlineKeyboardMarkup::make()
                    ->addRow(InlineKeyboardButton::make($fsm['button_text'], url: $fsm['button_url']))
                    ->addRow(
                        InlineKeyboardButton::make('‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å', callback_data: 'ad_send'),
                        InlineKeyboardButton::make('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'ad_cancel')
                    );

                $caption = "<b>{$fsm['title']}</b>\n\n{$fsm['description']}";

                if (($fsm['media_type'] ?? null) === 'photo') {
                    $bot->sendPhoto(
                        photo: $fsm['media_file_id'],
                        caption: $caption,
                        parse_mode: 'HTML',
                        reply_markup: $keyboard
                    );
                } elseif (($fsm['media_type'] ?? null) === 'video') {
                    $bot->sendVideo(
                        video: $fsm['media_file_id'],
                        caption: $caption,
                        parse_mode: 'HTML',
                        reply_markup: $keyboard
                    );
                } elseif (($fsm['media_type'] ?? null) === 'animation') {
                    $bot->sendAnimation(
                        animation: $fsm['media_file_id'],
                        caption: $caption,
                        parse_mode: 'HTML',
                        reply_markup: $keyboard
                    );
                } else {
                    $bot->sendMessage(
                        text: $caption,
                        parse_mode: 'HTML',
                        reply_markup: $keyboard
                    );
                }
                break;
        }
    }

    public function adFsmMedia(Nutgram $bot)
    {
        $fsm = Cache::get("ad_fsm_{$bot->userId()}");
        if (!$fsm || $fsm['step'] !== 'media') return;

        if ($bot->message()->photo) {
            $fsm['media_type'] = 'photo';
            $fsm['media_file_id'] = $bot->message()->photo[count($bot->message()->photo)-1]->file_id;
        } elseif ($bot->message()->video) {
            $fsm['media_type'] = 'video';
            $fsm['media_file_id'] = $bot->message()->video->file_id;
        } elseif ($bot->message()->animation) {
            $fsm['media_type'] = 'animation';
            $fsm['media_file_id'] = $bot->message()->animation->file_id;
        } else {
            $bot->sendMessage('‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip.');
            return;
        }
        $fsm['step'] = 'url';
        Cache::put("ad_fsm_{$bot->userId()}", $fsm);
        $bot->sendMessage('üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).');
    }

    public function adFsmSkipMedia(Nutgram $bot)
    {
        $fsm = Cache::get("ad_fsm_{$bot->userId()}");
        if (!$fsm || $fsm['step'] !== 'media') return;
        $fsm['media_type'] = 'none';
        $fsm['step'] = 'url';
        Cache::put("ad_fsm_{$bot->userId()}", $fsm);
        $bot->sendMessage('üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http/https).');
    }

    public function adFsmSend(Nutgram $bot)
    {
        $fsm = Cache::pull("ad_fsm_{$bot->userId()}");
        if (!$fsm) {
            $bot->answerCallbackQuery('–†–µ–∫–ª–∞–º–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.');
            return;
        }

        $callback = $bot->callbackQuery();
        if ($callback?->id) {
            $bot->answerCallbackQuery(
                callback_query_id: $callback->id,
                text: 'üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å...',
                show_alert: false
            );
        }

        $adminIds = config('nutgram.admins_id');
        $users = TelegramUser::where('language', $fsm['lang'])->pluck('user_id');

        // –ö–Ω–æ–ø–∫–∞
        $keyboard = InlineKeyboardMarkup::make()
            ->addRow(InlineKeyboardButton::make($fsm['button_text'], url: $fsm['button_url']));

        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ + —Ç–µ–∫—Å—Ç
        $caption = trim(mb_substr("<b>{$fsm['title']}</b>\n\n{$fsm['description']}", 0, 1024));

        $mediaType = $fsm['media_type'] ?? null;
        $mediaId = $fsm['media_file_id'] ?? null;

        // --- –°–û–•–†–ê–ù–Ø–ï–ú –†–ï–ö–õ–ê–ú–£ –í –ë–î ---
        $ad_uuid = \Illuminate\Support\Str::uuid()->toString();
        $ad = Advertisements::create([
            'ad_uuid' => $ad_uuid,
            'content' => $caption,
            'media_type' => $mediaType,
            'media_file_id' => $mediaId,
            'target_lang' => $fsm['lang'],
            'is_active' => true,
        ]);
        // ---

        $success = 0;
        $failed = 0;

        foreach ($users as $user_id) {
            if (in_array($user_id, $adminIds)) continue;

            try {
                $msg = null;
                switch ($mediaType) {
                    case 'photo':
                        $msg = $bot->sendPhoto(
                            photo: $mediaId,
                            caption: $caption,
                            parse_mode: 'HTML',
                            reply_markup: $keyboard,
                            chat_id: $user_id
                        );
                        break;
                    case 'video':
                        $msg = $bot->sendVideo(
                            video: $mediaId,
                            caption: $caption,
                            parse_mode: 'HTML',
                            reply_markup: $keyboard,
                            chat_id: $user_id
                        );
                        break;
                    case 'animation':
                        $msg = $bot->sendAnimation(
                            animation: $mediaId,
                            caption: $caption,
                            parse_mode: 'HTML',
                            reply_markup: $keyboard,
                            chat_id: $user_id
                        );
                        break;
                    default:
                        $msg = $bot->sendMessage(
                            text: $caption,
                            parse_mode: 'HTML',
                            reply_markup: $keyboard,
                            chat_id: $user_id
                        );
                        break;
                }

                // --- –°–û–•–†–ê–ù–Ø–ï–ú –î–û–°–¢–ê–í–ö–£ ---
                AdvertisementsDeliveries::create([
                    'ad_id' => $ad->id,
                    'user_id' => $user_id,
                    'message_id' => $msg->message_id ?? null,
                    'sent_at' => now(),
                ]);
                // ---

                $success++;
            } catch (\Throwable $e) {
                $failed++;
                // Log::error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user_id}: {$e->getMessage()}");
            }
        }

        try {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
            $text = "‚úÖ –†–µ–∫–ª–∞–º–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\nüì¨ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: $success\n‚ùå –û—à–∏–±–æ–∫: $failed";

            if ($callback?->message?->text !== null) {
                $bot->editMessageText($text)
                    ->chatId($callback->message->chat->id)
                    ->messageId($callback->message->message_id);
            } else {
                $bot->sendMessage($text)
                    ->chatId($bot->userId());
            }
        } catch (\Throwable $e) {
            $failed++;
            Log::error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {$user_id}: {$e->getMessage()}");
            Log::error("caption: " . $caption);
            Log::error("keyboard: " . json_encode($keyboard->toArray()));
        }
    }

    // –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    public function showAds(Nutgram $bot, $page = 1)
    {
        $perPage = 10;
        $ads = Advertisements::orderByDesc('id')
            ->skip(($page-1)*$perPage)
            ->take($perPage)
            ->get();
        $total = Advertisements::count();

        if ($ads->isEmpty()) {
            $bot->sendMessage('–ù–µ—Ç —Ä–µ–∫–ª–∞–º—ã.');
            return;
        }

        $text = '';
        foreach ($ads as $ad) {
            $text .= "üìú UUID: <code>{$ad->ad_uuid}</code>\n";
            $text .= "üåç –Ø–∑—ã–∫: {$ad->target_lang}\n";
            $text .= "üìù {$ad->content}\n\n";
        }

        $keyboard = InlineKeyboardMarkup::make();
        $navRow = [];
        if ($page > 1) {
            $navRow[] = InlineKeyboardButton::make('‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è', callback_data: 'ads_page:'.($page-1));
        }
        if ($page * $perPage < $total) {
            $navRow[] = InlineKeyboardButton::make('–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è', callback_data: 'ads_page:'.($page+1));
        }
        if ($navRow) {
            $keyboard->addRow(...$navRow);
        }

        $bot->sendMessage(
            chat_id: $bot->userId(), // –∏–ª–∏ —è–≤–Ω–æ id, –Ω–∞–ø—Ä–∏–º–µ—Ä: 6597464835
            text: $text,
            parse_mode: 'HTML',
            reply_markup: $keyboard,
            disable_web_page_preview: true
        );
    }

    // Callback –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    public function showAdsPage(Nutgram $bot, $page)
    {
        $this->showAds($bot, (int)$page);
    }

    public function adFsmCancel(Nutgram $bot)
    {
        $bot->answerCallbackQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
        $bot->editMessageText('‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ')->send();
        Cache::forget("ad_fsm_{$bot->userId()}");
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º—ã –ø–æ UUID –∏–ª–∏ ID
    public function adsDelete(Nutgram $bot, $ad_id)
    {
        // –ù–∞–π—Ç–∏ —Ä–µ–∫–ª–∞–º—É –ø–æ UUID –∏–ª–∏ ID
        $ad = Advertisements::where('ad_uuid', $ad_id)->first();
        if (is_numeric($ad_id)) {
            $ad = Advertisements::where('id', $ad_id)->first();
        } else {
            $ad = Advertisements::where('ad_uuid', $ad_id)->first();
        }
        if (!$ad) {
            $bot->sendMessage('‚ùå –†–µ–∫–ª–∞–º–∞ —Å —Ç–∞–∫–∏–º ID/UUID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
            return;
        }
        // –ù–∞–π—Ç–∏ –≤—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        $deliveries = AdvertisementsDeliveries::where('ad_id', $ad->id)->get();
        $deleted = 0;
        foreach ($deliveries as $delivery) {
            try {
                $bot->deleteMessage($delivery->user_id, $delivery->message_id);
                $deleted++;
            } catch (\Throwable $e) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å
            }
        }
        // –£–¥–∞–ª–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —Å–∞–º—É —Ä–µ–∫–ª–∞–º—É
        AdvertisementsDeliveries::where('ad_id', $ad->id)->delete();
        $ad->delete();
        $bot->sendMessage("‚úÖ –†–µ–∫–ª–∞–º–∞ —É–¥–∞–ª–µ–Ω–∞. –°–æ–æ–±—â–µ–Ω–∏–π —É–¥–∞–ª–µ–Ω–æ: $deleted");
    }
}
